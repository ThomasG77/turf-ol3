!function(e){if("object"==typeof exports&&"undefined"!=typeof module)module.exports=e();else if("function"==typeof define&&define.amd)define([],e);else{var r;r="undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self?self:this,(r.turf||(r.turf={})).circle=e()}}(function(){return function e(r,t,o){function n(a,u){if(!t[a]){if(!r[a]){var s="function"==typeof require&&require;if(!u&&s)return s(a,!0);if(i)return i(a,!0);var f=new Error("Cannot find module '"+a+"'");throw f.code="MODULE_NOT_FOUND",f}var p=t[a]={exports:{}};r[a][0].call(p.exports,function(e){var t=r[a][1][e];return n(t?t:e)},p,p.exports,e,r,t,o)}return t[a].exports}for(var i="function"==typeof require&&require,a=0;a<o.length;a++)n(o[a]);return n}({1:[function(e,r){var t=e("turf-destination"),o=e("turf-helpers"),n=o.polygon;r.exports=function(e,r,o,i){o=o||64;for(var a=[],u=0;o>u;u++)a.push(t(e,r,360*u/o,i).geometry.coordinates);return a.push(a[0]),n([a])}},{"turf-destination":2,"turf-helpers":3}],2:[function(e,r){var t=e("turf-invariant").getCoord,o=e("turf-helpers"),n=o.point,i=o.distanceToRadians;r.exports=function(e,r,o,a){var u=Math.PI/180,s=180/Math.PI,f=t(e),p=u*f[0],l=u*f[1],c=u*o,d=i(r,a),y=Math.asin(Math.sin(l)*Math.cos(d)+Math.cos(l)*Math.sin(d)*Math.cos(c)),h=p+Math.atan2(Math.sin(c)*Math.sin(d)*Math.cos(l),Math.cos(d)-Math.sin(l)*Math.sin(y));return n([s*h,s*y])}},{"turf-helpers":3,"turf-invariant":4}],3:[function(e,r){function t(e,r){return{type:"Feature",properties:r||{},geometry:e}}r.exports.feature=t,r.exports.point=function(e,r){if(!Array.isArray(e))throw new Error("Coordinates must be an array");if(e.length<2)throw new Error("Coordinates must be at least 2 numbers long");return t({type:"Point",coordinates:e.slice()},r)},r.exports.polygon=function(e,r){if(!e)throw new Error("No coordinates passed");for(var o=0;o<e.length;o++){var n=e[o];if(n.length<4)throw new Error("Each LinearRing of a Polygon must have 4 or more Positions.");for(var i=0;i<n[n.length-1].length;i++)if(n[n.length-1][i]!==n[0][i])throw new Error("First and last Position are not equivalent.")}return t({type:"Polygon",coordinates:e},r)},r.exports.lineString=function(e,r){if(!e)throw new Error("No coordinates passed");return t({type:"LineString",coordinates:e},r)},r.exports.featureCollection=function(e){return{type:"FeatureCollection",features:e}},r.exports.multiLineString=function(e,r){if(!e)throw new Error("No coordinates passed");return t({type:"MultiLineString",coordinates:e},r)},r.exports.multiPoint=function(e,r){if(!e)throw new Error("No coordinates passed");return t({type:"MultiPoint",coordinates:e},r)},r.exports.multiPolygon=function(e,r){if(!e)throw new Error("No coordinates passed");return t({type:"MultiPolygon",coordinates:e},r)},r.exports.geometryCollection=function(e,r){return t({type:"GeometryCollection",geometries:e},r)};var o={miles:3960,nauticalmiles:3441.145,degrees:57.2957795,radians:1,inches:250905600,yards:6969600,meters:6373e3,metres:6373e3,kilometers:6373,kilometres:6373};r.exports.radiansToDistance=function(e,r){var t=o[r||"kilometers"];if(void 0===t)throw new Error("Invalid unit");return e*t},r.exports.distanceToRadians=function(e,r){var t=o[r||"kilometers"];if(void 0===t)throw new Error("Invalid unit");return e/t},r.exports.distanceToDegrees=function(e,r){var t=o[r||"kilometers"];if(void 0===t)throw new Error("Invalid unit");return e/t*57.2958}},{}],4:[function(e,r){function t(e){if(Array.isArray(e)&&"number"==typeof e[0]&&"number"==typeof e[1])return e;if(e){if("Feature"===e.type&&e.geometry&&"Point"===e.geometry.type&&Array.isArray(e.geometry.coordinates))return e.geometry.coordinates;if("Point"===e.type&&Array.isArray(e.coordinates))return e.coordinates}throw new Error("A coordinate, feature, or point geometry is required")}function o(e,r,t){if(!r||!t)throw new Error("type and name required");if(!e||e.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.type)}function n(e,r,t){if(!t)throw new Error(".featureOf() requires a name");if(!e||"Feature"!==e.type||!e.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!e.geometry||e.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+e.geometry.type)}function i(e,r,t){if(!t)throw new Error(".collectionOf() requires a name");if(!e||"FeatureCollection"!==e.type)throw new Error("Invalid input to "+t+", FeatureCollection required");for(var o=0;o<e.features.length;o++){var n=e.features[o];if(!n||"Feature"!==n.type||!n.geometry)throw new Error("Invalid input to "+t+", Feature with geometry required");if(!n.geometry||n.geometry.type!==r)throw new Error("Invalid input to "+t+": must be a "+r+", given "+n.geometry.type)}}r.exports.geojsonType=o,r.exports.collectionOf=i,r.exports.featureOf=n,r.exports.getCoord=t},{}]},{},[1])(1)});